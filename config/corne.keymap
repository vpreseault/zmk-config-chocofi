/* urob helpers */
/* #include "zmk-helpers/helper.h" */

#include "zmk-helpers/key-labels/36.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38     // left-hand keys
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41   // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

/ {
    behaviors {
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;             // hrm triggered on same hand during slow typing
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <350>;       // updated to relaxed typing speed: 10500/(40WPM)
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;             // hrm triggered on same hand during slow typing
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <350>;       // updated to relaxed typing speed: 10500/(40WPM)
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        curly_brace: curly_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "CURLY_BRACE";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        brackets: brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKETS";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        angle_brackets: angle_brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_BRACKETS";
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        accents_grave: accents_grave {
            compatible = "zmk,behavior-hold-tap";
            label = "ACCENTS_GRAVE";
            bindings = <&caps_word>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };
    };

    macros {
        e_aigu: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp RALT>;

            label = "NEW_MACRO";
        };

        e_grave: e_aigu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "E_AIGU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp B  &kp L  &kp D     &kp C  &kp V        &kp J      &kp Y          &kp O    &kp U     &kp COMMA  &none
&none  &kp N  &kp R  &kp T     &kp S  &kp G        &kp P      &kp H          &kp A    &kp E     &kp I      &none
&none  &kp Q  &kp X  &kp M     &kp W  &kp Z        &kp K      &kp F          &kp SQT  &kp FSLH  &kp DOT    &none
                     &kp LGUI  &mo 1  &kp SPACE    &kp ENTER  &kp BACKSPACE  &mo 2
            >;
        };

        symbol {
            bindings = <
&none  &kp GRAVE     &brackets     &curly_brace  &angle_brackets  &kp NON_US_BACKSLASH    &kp SEMICOLON  &kp SQT     &kp MINUS  &kp EQUAL   &kp BACKSPACE  &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4     &kp N5                  &kp NUMBER_6   &kp N7      &kp N8     &kp N9      &kp N0         &none
&none  &kp ESC       &none         &none         &none            &none                   &none          &none       &kp COMMA  &kp PERIOD  &kp SLASH      &none
                                   &kp LALT      &trans           &kp SPACE               &kp BACKSPACE  &kp DELETE  &to 3
            >;
        };

        number_media {
            bindings = <
&none  &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp PLUS      &none       &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_VOLUME_UP  &none
&none  &kp MINUS     &kp N4  &kp N5  &kp N6  &kp N0        &kp LEFT    &kp DOWN      &kp UP            &kp RIGHT     &kp C_VOL_DN     &none
&none  &kp FSLH      &kp N1  &kp N2  &kp N3  &kp DOT       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &kp C_MUTE       &none
                             &trans  &to 0   &kp ESCAPE    &kp ENTER   &to 1         &to 3
            >;
        };

        accents {
            bindings = <
&trans  &trans        &trans        &trans            &trans        &trans        &trans           &trans  &trans  &trans  &trans  &trans
&trans  &trans        &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans        &trans           &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1      &bt BT_SEL 0  &bt BT_CLR    &rgb_ug RGB_TOG  &trans  &trans  &trans  &trans  &rgb_ug RGB_HUI
                                    &rgb_ug RGB_HUD   &to 0         &trans        &trans           &to 1   &to 2
            >;
        };

        colemak {
            bindings = <
&none  &kp Q        &kp W        &kp F         &kp P         &kp B        &kp J          &kp L           &kp U         &kp Y        &kp BACKSPACE  &none
&none  &hml LGUI A  &hml LALT R  &hml LSHFT S  &hml LCTRL T  &kp G        &kp M          &hmr RCTRL N    &hmr RSHFT E  &hmr RALT I  &hmr RGUI O    &none
&none  &kp Z        &kp X        &kp C         &kp D         &kp V        &kp K          &kp H           &kp COMMA     &kp DOT      &kp FSLH       &none
                                 &kp LGUI      &mo 1         &kp SPACE    &kp BACKSPACE  &kp LEFT_SHIFT  &to 2
            >;
        };

        graphite {
            bindings = <
&none  &kp B            &kp L        &kp D         &kp W         &kp Z        &kp SQT        &kp F           &kp O         &kp U        &kp J        &none
&none  &hml LEFT_GUI N  &hml LALT R  &hml LSHFT T  &hml LCTRL S  &kp G        &kp Y          &hmr RCTRL H    &hmr RSHFT A  &hmr RALT E  &hmr RGUI I  &none
&none  &kp Q            &kp X        &kp M         &kp C         &kp V        &kp K          &kp P           &kp COMMA     &kp MINUS    &kp FSLH     &none
                                     &kp LGUI      &mo 1         &kp SPACE    &kp BACKSPACE  &kp LEFT_SHIFT  &to 2
            >;
        };

        qwerty {
            bindings = <
&none  &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y          &kp U           &kp I      &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H          &kp J           &kp K      &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N          &kp M           &kp COMMA  &kp DOT  &kp FSLH  &none
                     &kp LGUI  &mo 1  &kp SPACE    &kp BACKSPACE  &kp LEFT_SHIFT  &to 2
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Layer3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
