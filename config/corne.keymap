#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"
#include "zmk-helpers/unicode-chars/french.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

/* left-hand HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/ {
    macros {
        e_aigu: e_aigu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_N1) &kp LA(KP_N3) &kp LA(KP_N0)>;
            label = "E_AIGU";
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(TAB)>;
            label = "ALT_TAB";
        };
    };

    behaviors {
        semi_colon: semi_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "SEMI_COLON";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp COLON>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q  &kp W  &kp F     &kp P      &kp B        &kp J          &kp L  &kp U      &kp Y    &kp SEMI  &none
&none  &hml LGUI A  &hml LALT R  &hml LSHFT     &html LCTRL      &kp G        &kp M          &hmr LCTRL N  &hmr RSHFT E      &hmr LALT I    &hmr LGUI O     &none
&none  &kp Z  &kp X  &kp C     &kp D      &kp V        &kp K          &kp H  &kp COMMA  &kp DOT  &kp FSLH  &none
                     &kp LGUI  &kp LSHFT  &kp SPACE    &kp BACKSPACE  &to 1  &to 2
            >;
        };

        symbol {
            bindings = <
&none  &kp N1   &kp N2     &kp N3     &kp N4           &kp N5               &kp N6            &kp N7          &kp N8           &kp N9             &kp N0    &none
&none  &kp TAB  &kp PLUS   &kp MINUS  &kp EXCLAMATION  &kp DOUBLE_QUOTES    &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RET   &none
&none  &kp ESC  &kp EQUAL  &kp UNDER  &kp QUESTION     &kp SQT              &kp LT            &kp LPAR        &kp RPAR         &kp GT             &kp BSLH  &none
                           &kp LALT   &to 0            &kp SPACE            &kp BACKSPACE     &to 2           &to 3
            >;
        };

        number_media {
            bindings = <
&none  &kp ASTERISK  &kp N7  &kp N8    &kp N9  &kp PLUS      &none       &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_VOLUME_UP  &none
&none  &kp MINUS     &kp N4  &kp N5    &kp N6  &kp N0        &kp LEFT    &kp DOWN      &kp UP            &kp RIGHT     &kp C_VOL_DN     &none
&none  &kp FSLH      &kp N1  &kp N2    &kp N3  &kp DOT       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &kp C_MUTE       &none
                             &alt_tab  &to 0   &kp ESCAPE    &kp ENTER   &to 1         &to 3
            >;
        };

        accents {
            bindings = <
&trans  &trans        &trans        &trans            &trans        &trans        &trans           &trans   &trans  &trans  &trans  &trans
&trans  &trans        &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans        &trans           &fr_e_acute  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1      &bt BT_SEL 0  &bt BT_CLR    &rgb_ug RGB_TOG  &trans   &trans  &trans  &trans  &rgb_ug RGB_HUI
                                    &rgb_ug RGB_HUD   &to 0         &trans        &trans           &to 1    &to 2
            >;
        };
    };
};
